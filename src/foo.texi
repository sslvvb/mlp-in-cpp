\input texinfo
@setfilename mlp.info
@documentencoding UTF-8

@settitle MLP

@copying
Copyright (c) hjerilyn tblitzcr 2022
@end copying

@titlepage
@title MLP
@subtitle «Implementation of a basic multilayer perceptron»
@author hjerilyn tblitzcr

@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@headings off

@contents

@ifnottex
@node Top
@top Foo Compiler
@insertcopying
@end ifnottex

@menu
* Description:
* The perceptron:
* Implementation of the perceptron in two ways:
* The interface of the program provides the ability to:
@end menu

@node Description
@chapter Description

@itemize @bullet
@item
The program is developed in C++ language of C++17 standard.
@item
Code is written following the Google style.
@item
The program provides the ability to form and train neural network models to classify handwritten Latin letters.
@end itemize

@node The perceptron
@chapter The perceptron

@itemize @bullet
@item
Classifies images with handwritten letters of the Latin alphabet.
@item
Have from 2 to 5 hidden layers.
@item
Uses a sigmoid activation function for each hidden layer.
@item
Is able to learn on an open dataset.
@item
Is trained using the backpropagation method.
@item
Implementation of the perceptron in two ways:

@itemize @minus
@item
In matrix form (all layers are represented as weight matrices).
@item
In graph form (each neuron is represented as some node object connected to other nodes by refs).
@end itemize

@end itemize

@node The interface of the program provides the ability to
@chapter The interface of the program provides the ability to

@itemize @bullet
@item
Run the experiment on the test sample or on a part of it, given by a floating point number between 0 and 1 (where 0 is the empty sample - the degenerate situation, and 1 is the whole test sample). After the experiment, there are an average accuracy, precision, recall, f-measure and total time spent on the experiment displayed on the screen.
@item
Load BMP images (image size can be up to 512x512) with Latin letters and classify them.
@item
Draw square images by hand in a separate window.
@item
Start the real-time training process for a user-defined number of epochs with displaying the error control values for each training epoch. Make a report as a graph of the error change calculated on the test sample for each training epoch.
@item
Run the training process using cross-validation for a given number of groups k.
@item
Switch perceptron implementation (matrix or graph).
@item
Switch the number of perceptron hidden layers (from 2 to 5).
@item
Save to a file and load weights of perceptron from a file.
@end itemize


@bye
